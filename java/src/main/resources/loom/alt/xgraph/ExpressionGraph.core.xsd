<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<xs:schema
        version="1.0"
        xmlns:xs="http://www.w3.org/2001/XMLSchema"
        xmlns:eg="http://loom-project.org/schemas/v0.1/ExpressionGraph.core.xsd"
        targetNamespace="http://loom-project.org/schemas/v0.1/ExpressionGraph.core.xsd"
        elementFormDefault="qualified"
>
    <xs:annotation>
        <xs:documentation>
            This schema defines the XGraph graph format.
        </xs:documentation>
    </xs:annotation>

    <xs:simpleType name="SimpleIdent">
        <xs:restriction base="xs:string">
            <xs:pattern value="[a-zA-Z_][a-zA-Z_0-9]*"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:element name="graph">
        <xs:annotation>
            <xs:documentation>Graph nodes are the root of a graph.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <!--
                 | Ideally, this would be restricted to subtypes of NodeType;
                 | but that requires use of an XSD 1.1 processor.
                 +-->
                <xs:any minOccurs="0" maxOccurs="unbounded"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>

    <xs:simpleType name="NodeID">
        <xs:annotation>
            <xs:documentation>NodeID is a unique identifier for a node.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:ID">
            <xs:pattern value="node-[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="NodeRef">
        <xs:annotation>
            <xs:documentation>NodeRef is a reference to a node.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:IDREF">
            <xs:pattern value="node-[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="NodeType">
        <xs:annotation>
            <xs:documentation>NodeType is the base type for all node types.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="annotations" minOccurs="0">
                <!-- this is the embedded-annotation approach. -->
                <xs:complexType>
                    <xs:sequence>
                        <xs:any minOccurs="0" maxOccurs="unbounded"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
        </xs:sequence>
        <xs:attribute name="id" type="eg:NodeID" use="required"/>
    </xs:complexType>

    <xs:complexType name="AnnotationType">
        <!-- this is the linked-annotation approach. -->
        <xs:complexContent>
            <xs:extension base="eg:NodeType">
                <xs:attribute name="ref" type="eg:NodeRef" use="required"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:element name="ref">
        <xs:annotation>
            <xs:documentation>Ref nodes are references to other nodes.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="target" type="eg:NodeRef" use="required"/>
        </xs:complexType>
    </xs:element>

    <xs:element name="trace">
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="eg:AnnotationType">
                    <xs:sequence>
                        <xs:element ref="eg:text" minOccurs="1"/>
                    </xs:sequence>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>

    <xs:element name="operation">
        <xs:annotation>
            <xs:documentation>Operation nodes describe tensor transforming processes.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="eg:NodeType">
                    <xs:sequence>
                        <xs:element ref="eg:inputs" minOccurs="0"/>
                        <xs:element ref="eg:results" minOccurs="0"/>
                        <xs:element ref="eg:options" minOccurs="0"/>
                    </xs:sequence>
                    <xs:attribute name="op" type="xs:anyURI" use="required"/>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>

    <!-- Operation inputs and results -->
    <xs:complexType name="KeyedReferenceMap">
        <xs:annotation>
            <xs:documentation>
                KeyedReferenceMap is a map of named references. The name attribute of each item must be unique;
                but the xs:unique constraint cannot be defined on a type; it must be defined on an element.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="item" maxOccurs="unbounded">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element ref="eg:ref" minOccurs="1" maxOccurs="unbounded"/>
                    </xs:sequence>
                    <xs:attribute name="name" type="eg:SimpleIdent"/>
                </xs:complexType>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:element name="inputs" type="eg:KeyedReferenceMap">
        <xs:unique name="inputs.unique.keys">
            <xs:selector xpath="eg:item"/>
            <xs:field xpath="@name"/>
        </xs:unique>
    </xs:element>

    <xs:element name="results" type="eg:KeyedReferenceMap">
        <xs:unique name="results.unique.keys">
            <xs:selector xpath="eg:item"/>
            <xs:field xpath="@name"/>
        </xs:unique>
    </xs:element>

    <xs:element name="options">
        <xs:complexType>
            <xs:sequence>
                <xs:element name="item" maxOccurs="unbounded">
                    <xs:complexType>
                        <xs:sequence>
                            <xs:any minOccurs="0" maxOccurs="unbounded"/>
                        </xs:sequence>
                        <xs:attribute name="name" type="eg:SimpleIdent"/>
                    </xs:complexType>
                </xs:element>
            </xs:sequence>
        </xs:complexType>
        <xs:unique name="options.unique.keys">
            <xs:selector xpath="eg:item"/>
            <xs:field xpath="@name"/>
        </xs:unique>
    </xs:element>

    <xs:element name="text">
        <xs:simpleType>
            <xs:restriction base="xs:string"/>
        </xs:simpleType>
    </xs:element>

    <!-- TODO: can we find the annotations for a given node and do secondary validation? -->
    <xs:simpleType name="JsonType">
        <xs:restriction base="xs:string">
            <xs:pattern value=".*"/>
        </xs:restriction>
    </xs:simpleType>

    <!-- TODO: can we find the annotations for a given node and do secondary validation? -->
    <xs:simpleType name="ZTensor">
        <xs:annotation>
            <xs:documentation>
                ZTensor is a zero or more dimensional tensor. The value is a JSON string.
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="eg:JsonType"/>
    </xs:simpleType>

    <xs:element name="json" type="eg:JsonType"/>

    <xs:element name="tensor">
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="eg:NodeType">
                    <xs:attribute name="dtype" type="xs:string" use="required"/>
                    <xs:attribute name="shape" type="eg:ZTensor" use="required"/>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>

</xs:schema>